name: Check original pdm release
on:
  schedule:
    - cron:  '0 12 * * *'
  workflow_dispatch:
jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Fetch release info
        run: curl -sL https://api.github.com/repos/pdm-project/pdm/releases/latest > release-info.json

      - name: Check for modified files
        id: git-check
        run: echo 'new_version=$([ -z "`git status release-info.json --porcelain`" ] && echo "false" || echo "true")' >> $GITHUB_OUTPUT

      - name: Commit latest release version
        if: ${{ steps.git-check.outputs.new_version }} == "true"
        run: |
          git config --global user.name 'Semyon Dubrovin'
          git config --global user.email 'seven45@mail.ru'
          git add release-info.json
          git commit -am "fix: upgrade pdm version"
          git push || 0

      - name: Read new version data
        id: get-metadata
        if: "${{ steps.git-check.outputs.new_version }}" == "true"
        run: |
          echo "name=$(cat release-info.json | jq -r '.name')" >> $GITHUB_OUTPUT
          echo "version=$(cat release-info.json | jq -r '.tag_name')" >> $GITHUB_OUTPUT
          echo "draft=$(cat release-info.json | jq -r '.draft')" >> $GITHUB_OUTPUT
          echo "prerelease=$(cat release-info.json | jq -r '.prerelease')" >> $GITHUB_OUTPUT

      - name: Create release
        if: "${{ steps.git-check.outputs.new_version }}" == "true"
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: ${{ steps.get-metadata.outputs.name }}
          automatic_release_tag: ${{ steps.get-metadata.outputs.version }}
          draft: ${{ steps.get-metadata.outputs.draft }}
          prerelease: ${{ steps.get-metadata.outputs.prerelease }}
