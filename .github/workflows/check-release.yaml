name: Search new pdm release
on: [workflow_call]
jobs:
  check-release:
    name: Create release if found new pdm-version on original repo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Fetch release info
        run: curl -sL https://api.github.com/repos/pdm-project/pdm/releases/latest > release-info.json

      - name: Check modified files
        uses: tj-actions/verify-changed-files@v14
        id: check-files
        with:
          files: release-info.json

      - name: Commit latest release version
        if: steps.check-files.outputs.files_changed == 'true'
        run: |
          git config --global user.name 'Semyon Dubrovin'
          git config --global user.email 'seven45@mail.ru'
          git add release-info.json
          git commit -m "fix: upgrade pdm version"
          git push

      - name: Read new version data
        if: steps.check-files.outputs.files_changed == 'true'
        id: get-metadata
        run: |
          echo "name=$(cat release-info.json | jq -r '.name')" >> $GITHUB_OUTPUT
          echo "version=$(cat release-info.json | jq -r '.tag_name')" >> $GITHUB_OUTPUT
          echo "draft=$(cat release-info.json | jq -r '.draft')" >> $GITHUB_OUTPUT
          echo "prerelease=$(cat release-info.json | jq -r '.prerelease')" >> $GITHUB_OUTPUT

      - name: Create release
        if: steps.check-files.outputs.files_changed == 'true'
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: ${{ steps.get-metadata.outputs.name }}
          automatic_release_tag: ${{ steps.get-metadata.outputs.version }}
          draft: ${{ steps.get-metadata.outputs.draft }}
          prerelease: ${{ steps.get-metadata.outputs.prerelease }}
